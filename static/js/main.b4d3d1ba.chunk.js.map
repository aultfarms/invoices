{"version":3,"sources":["InvoiceGroup.js","App.js","../../../aultfarms-lib/src/trello/module/errors.js","../../../aultfarms-lib/src/trello/module/sequences.js","../../../aultfarms-lib/src/feed/module/sequences.js","../../../aultfarms-lib/src/feed/module/index.js","../../../aultfarms-lib/src/trello/module/index.js","../../../aultfarms-lib/src/windowSize/module/sequences.js","../../../aultfarms-lib/src/windowSize/module/index.js","../../../aultfarms-lib/src/trello/provider/index.js","../../../aultfarms-lib/src/windowSize/provider/index.js","module/sequences.js","module/index.js","registerServiceWorker.js","index.js"],"names":["connect","curgroupname","state","curgroup","markAsInvoiced","sequences","props","className","Typography","variant","gutterBottom","_","map","keys","name","i","Card","key","CardContent","Table","TableHead","TableRow","TableCell","TableBody","sortBy","r","moment","date","format","source","numeral","weight","Button","onClick","card","authorized","feedReady","page","init","drawerToggle","changeGroup","this","group","Drawer","anchor","open","drawer","List","notInvoiced","notPaidFor","truckingNotPaid","display","ListItem","button","invoiceGroupClicked","ListItemText","primary","AppBar","position","Toolbar","IconButton","color","aria-label","renderDrawer","renderAuthorized","renderFeedReady","Component","TrelloSaveError","CerebralError","TrelloGetError","TrelloAuthorizeError","CARD_FIELDS","Promise","config","warnings","wForgottenReturn","authorize","trello","catch","e","message","JSON","stringify","stack","errors","set","deauthorize","sequence","initialized","boards","lists","loadList","ret","try","boardName","get","fields","filter","b","closed","then","result","board","find","console","log","post","id","labels","listName","l","list","error","c","cards","keyBy","statePath","store","reloadOneCard","listname","idList","toLowerCase","putCard","url","put","err","addLabelToCard","value","idLabel","processOneCard","ignoreBefore","matches","match","trim","isBefore","rest","sourceAndNumber","replace","toUpperCase","loadNumber","destination","driver","note","invoiced","paidFor","truckingPaid","processGroups","records","reduce","acc","push","d","groupBy","n","p","t","fetch","toString","reprocessOneCard","ready","resized","windowSize","orientation","isSmall","width","height","TrelloClientLoadError","Provider","count","check","window","Trello","delay","resolve","reject","type","persist","scope","read","write","expiration","success","path","params","dimensions","innerWidth","innerHeight","seq","_M","windowResized","context","sequencepath","addEventListener","bind","toggle","closeDrawer","handleError","feed","invoicegroups","modules","feedModule","trelloModule","windowSizeModule","providers","trelloProvider","windowSizeProvider","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","CerebralApp","AppModule","devtools","ReactDOM","render","app","document","getElementById","URL","process","origin","response","status","headers","indexOf","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b4d3d1ba.chunk.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport { connect } from '@cerebral/react';\nimport { state,sequences} from 'cerebral';\nimport numeral from 'numeral';\nimport moment from 'moment';\n\nimport './InvoiceGroup.css';\n\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Button from '@material-ui/core/Button';\n\n\nexport default connect({\n  curgroupname: state`invoicegroups.curgroupname`,\n  curgroup: state`invoicegroups.curgroup`, // computed value for current group\n  markAsInvoiced: sequences`feed.markAsInvoiced`,\n}, function InvoiceGroup(props) {\n\n  return (\n    <div className=\"invoice-group\">\n      <Typography variant=\"h2\" gutterBottom>\n        {props.curgroupname}\n      </Typography>\n\n      { _.map(_.keys(props.curgroup), (name,i) => \n          <Card className=\"invoice-group-row\" key={'invoice-group-card-'+i}>\n            <CardContent>\n              <Typography gutterBottom>\n                {name}\n              </Typography>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Where</TableCell>\n                    <TableCell>Weight (tons)</TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {_.map(_.sortBy(props.curgroup[name], r => moment(r.date).format('YYYY-MM-DD')), (r,i) =>\n                    <TableRow key={'invoicegroup-row-'+i}>\n                      <TableCell>{r.date.format('YYYY-MM-DD')}</TableCell>\n                      <TableCell>{r.source}</TableCell>\n                      <TableCell>{numeral(r.weight / 2000.0).format('0,0.00')}</TableCell>\n                      <TableCell><Button onClick={() => { props.markAsInvoiced({card: r.card}) }}>Mark Invoiced</Button></TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        )\n      }\n    </div> \n  );\n});\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport { connect } from '@cerebral/react';\nimport { state, sequences } from 'cerebral';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Drawer from '@material-ui/core/Drawer';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport InvoiceGroup from './InvoiceGroup';\n//import CardErrors from './CardErrors';\n\nimport './App.css';\n\nexport default connect({\n  authorized: state`trello.authorized`,\n   feedReady: state`feed.ready`,\n        page: state`page`,\n          init: sequences`init`,\n  drawerToggle: sequences`drawerToggle`,\n   changeGroup: sequences`changeGroup`,\n}, class App extends Component {\n\n  componentWillMount() {\n    this.props.init();\n  }\n\n  renderAuthorized() {\n    if (!this.props.authorized) {\n      return <Card><CardContent>Not authorized in Trello yet.</CardContent></Card>;\n    }\n  }\n\n  renderFeedReady() {\n    if (!this.props.feedReady)  {\n      return <Card><CardContent>Feed data not ready</CardContent></Card>;\n    }\n  }\n\n  invoiceGroupClicked(group) {\n    return () => this.props.changeGroup({group});\n  }\n  renderDrawer() {\n    const props = this.props;\n    return (\n      <Drawer variant=\"persistent\" anchor='left' open={props.page.drawer.open}>\n        <List>\n          { \n            _.map({notInvoiced: 'Not Invoiced', notPaidFor: 'Not Paid For', truckingNotPaid: 'Trucking Not Paid', }, (display,key) => \n              <ListItem button key={key} onClick={this.invoiceGroupClicked(key)}>\n                <ListItemText primary={display}/>\n              </ListItem>\n            )\n          }\n        </List>\n      </Drawer>\n    );\n  }\n\n  render() {\n    //return <div></div>;\n    const props = this.props;\n    const hamburgerClicked = () => props.drawerToggle();\n    return (\n      <div className=\"App\">\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton onClick={hamburgerClicked} color=\"inherit\" aria-label=\"Menu\">\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"title\" color=\"inherit\" >\n              Feed - {props.page.name}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        \n        { this.renderDrawer() }\n\n        { /* props.feedReady ? <CardErrors /> : '' */ }\n\n        { props.feedReady ? <InvoiceGroup /> : '' }\n\n        { this.renderAuthorized() }\n        { this.renderFeedReady() }\n\n      </div>\n    );\n  }\n});\n\n","import { CerebralError } from 'cerebral';\n\nexport class TrelloSaveError      extends CerebralError {};\nexport class TrelloGetError       extends CerebralError {};\nexport class TrelloAuthorizeError extends CerebralError {};\n","import _ from 'lodash';\nimport { state, sequence, CerebralError } from 'cerebral';\nimport { set } from 'cerebral/factories';\nimport Promise from 'bluebird';\nimport * as errors from './errors';\n\nconst CARD_FIELDS = 'name,id,closed,desc,dateLastActivity,labels,idList';\n\n// For some reason cerebral seems to trigger these dumb warnings\nPromise.config({\n  // Enables all warnings except forgotten return statements.\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\n//-----------------------------------------------\n// authorize and deauthorize\nexport const authorize = [\n  ({trello}) => trello.authorize().catch(e => { e.message = 'Failed to authorize trello: '+e.message+JSON.stringify(e.stack); throw new errors.TrelloAuthorizeError(e) }),\n  set(state`trello.authorized`, true),\n];\n\nexport const deauthorize = [\n  set(state`trello.authorized`, false),\n  sequence('deauthorize->authorize', authorize),\n];\n\n\n//-----------------------------------------------------------\n// loadList sequence: given a board and list name in props, \n// load it into the state from Trello\n// props = { boardName, listName, key } the list's data will be put at trello.lists.<key>\n\n// We will keep a promise for each board/list that we need to verify exists\n// in order to prevent simulataneous accesses from creating duplicate boards/lists\n// when they see that a board doesn't exist yet.\nlet initialized = { boards: {}, lists: {} }; \nexport const loadList = sequence('trello.loadList', [\n  ({props,trello}) => {\n    let ret = {}; \n\n    // First get the board\n    return Promise.try(() => {\n      if (initialized.boards[props.boardName]) return initialized.boards[props.boardName]; // if this is a promise, then someone else is initializing or it's done already\n\n      // Start by getting board, create if doesn't exist, save promise in \"initialized\":\n      return initialized.boards[props.boardName] = trello.get('members/me/boards', { fields: 'name,id,closed' })\n      .filter(b => b && !b.closed)\n      .then(result => {\n        const board = _.find(result, b => b.name === props.boardName);\n        if (board) return board;\n        console.log('Could not find board '+props.boardName+', creating it.');\n        return trello.post('boards', { name: props.boardName}); // the result of this call is the board object itself\n      });\n    }).then(board => { ret.board = board })\n\n    // Then get the labels:\n    .then(() => trello.get(`boards/${ret.board.id}/labels`, { fields: 'id,name,color' }))\n    .then(labels => { ret.labels = labels; })\n\n    // Then get the list info:\n    .then(() => {\n      if (initialized.lists[props.listName]) return initialized.lists[props.listName];\n      return initialized.lists[props.listName] = trello.get(`boards/${ret.board.id}/lists`, {fields:'name,id,closed,cards'})\n      .filter(l => l && !l.closed)\n      .then(result => {\n        const list = _.find(result, l => l.name === props.listName);\n        if (list) return list;\n        console.log('Could not find list '+props.listName+', creating it.');\n        return trello.post(`boards/${ret.board.id}/lists`, { name: props.listName}); // resolves to the list object itself\n      });\n    }).then(list => { ret.list = list })\n\n    // Now setup the final return statement and catch:\n    .then(() => ret)\n    .catch(error => { error.message = 'Failed to get list '+props.listName+': '+error.message; throw new errors.TrelloGetError(error); });\n  },\n\n  // Now get the cards for this list:\n  ({props,trello}) => {\n    return trello.get('lists/'+props.list.id+'/cards', { fields: CARD_FIELDS })\n    .filter(c => c && !c.closed)\n    // Save the state path for this card inside the card itself so we can easily update later\n    .then(cards => _.keyBy(\n      _.map(cards, c => {\n        c.statePath = `trello.lists.${props.key}.${c.id}`;\n        return c;\n      }), c => c.id)\n    )\n    .then(result => ({ cards: result }))\n    .catch(error => { error.message = 'Failed to get cards for list '+props.listName+': '+error.message; throw new errors.TrelloGetError(error); })\n  },\n\n  // Put everything into state:\n  ({props,store,get}) => {\n    store.set(state`trello.lists.${props.key}`, { \n      id: props.list.id, \n      name: props.list.name, \n      cards: props.cards,\n      board: props.board,\n      labels: props.labels,\n    });\n  },\n\n]);\n\n// All this does is refresh the card object in-place.  It does not check that\n// it is still in the same board.\nexport const reloadOneCard = sequence('trello.reloadOneCard', [\n  ({trello,props,store,get}) => {\n    if (!props.card || !props.card.id) return;\n    return trello.get(`cards/${props.card.id}`, { fields: CARD_FIELDS })\n    .then(card => {\n      // Find the original place in Trello part of the state:\n      const lists = get(state`trello.lists`);\n      const list = _.find(lists, (list,listname) => (list.id === card.idList) );\n      const statePath = `trello.lists.${list.name.toLowerCase()}.cards.${card.id}`;\n      // Now change it in the state:\n      card.statePath = statePath;\n      store.set(state`${statePath}`, card);\n      return { card };\n    });\n  },\n]);\n\n// props.card = {\n//   id: 'only use if this card already exists',\n//   name: 'the name to put',\n//   idList: 'id of list for card, required no matter what',\n// }\nexport const putCard = sequence('trello.putCard', [\n  ({trello,props}) => Promise.try(() => {\n    let url = 'cards/';\n    if (!props.card.id) { // card does not exist, do a post\n      return trello.post(url, { name: props.card.name, idList: props.card.idList })\n    }\n    url += props.card.id+'/'; // card already exists, do a put to that card\n    return trello.put(url, { name: props.card.name, idList: props.card.idList })\n  }).catch(err => { throw new errors.TrelloSaveError('Failed to save to card', err) }),\n  reloadOneCard,\n]);\n\n// props.id, props.idLabel\nexport const addLabelToCard = sequence('trello.addLabelToCard', [\n  ({trello,props}) => { trello.post(`cards/${props.card.id}/idLabels`, { value: props.idLabel }) },\n  // Get the board name that goes with this card\n  reloadOneCard,\n]);\n","import _ from 'lodash';\nimport moment from 'moment';\nimport { set } from 'cerebral/factories';\nimport { state, sequence } from 'cerebral';\n\nimport { loadList, addLabelToCard } from '../../trello/module/sequences';\n\n\n// Example cards:\n// 2017-01-26: Df pellets 1-26-17 209366.  48.620 lbs - Home - Brock\n// 2017-01-24: North Central Pallets46470.  8 lbs - Home - Andrew.  Note: some info\n\nfunction processOneCard(c, { ignoreBefore }) {\n  if (!c.name) throw 'Card.name does not exist'\n  // Date on front:\n  let matches = c.name.match(/([0-9]{4}-[0-9]{2}-[0-9]{2}): *(.*)$/);\n  if (!matches || !matches[1]) throw 'Could not match date';\n  const date = moment(matches[1].trim(), 'YYYY-MM-DD');\n  if (date.isBefore(ignoreBefore)) return null; // ignore it\n  \n  let rest = matches[2];\n  if (!rest) throw 'No string after date';\n  // Next is source+number (up to a period)\n  matches = rest.match(/^([^.]*). *(.*)$/);\n  rest = matches[2];\n  if (!rest) throw 'No string after source+number';\n  if (!matches || !matches[1]) throw 'Could not match source+number';\n  const sourceAndNumber = matches[1].trim().replace('/ *pellets */g','');\n\n  matches = sourceAndNumber.match(/^([^0-9]+)?(.*)$/);\n  if (!matches) throw 'Could not match source name+number';\n  const source = (matches[1] ? matches[1].trim() : 'NONE').toUpperCase();\n  const loadNumber = matches[2] ? matches[2].trim() : '';\n\n  // Then comes pounds w/ period instead of comma sometimes\n  matches = rest.match(/(([0-9]+[,.])?[0-9]*) +lbs +- +(.*)$/);\n  if (!matches || !matches[1]) throw 'Could not match weight';\n  const weight = +(matches[1].replace(/[,.]/g,'').trim()); // convert to number\n  rest = matches[3];\n  if (!rest) throw 'No string after weight';\n\n  // Then comes destination\n  matches = rest.match(/([^-]+) *- *(.*)$/);\n  if (!matches || !matches[1]) throw 'Could not match destination';\n  const destination = matches[1].toUpperCase().trim();\n  rest = matches[2];\n  if (!rest) throw 'No string after destination';\n  // Now driver\n  matches = rest.match(/([^.]*)(. *(.*))?$/);\n  if (!matches || !matches[1]) throw 'Could not match driver';\n  const driver = matches[1].trim();\n  rest = matches[3] || '';\n  if (typeof rest !== 'string') throw 'No string after driver';\n\n  // Optional note\n  matches = rest.match(/Note: *(.*)$/);\n  const note = (matches && matches[1].trim()) || '';\n\n  // Set true/false properties based on labels:\n  const     invoiced = !!(_.find(c.labels, l => l.color === 'orange'));\n  const      paidFor = !!(_.find(c.labels, l => l.color === 'green'));\n  const truckingPaid = !!(_.find(c.labels, l => l.color === 'blue'));\n\n  return { \n    date, source, loadNumber, weight, destination, driver, \n    note, invoiced, paidFor, truckingPaid, card: c, id: c.id,\n  };\n}\n\nfunction processCards({store,get}) {\n  // First parse the cards, then later determine invoiced list, non-invoiced list, etc.\n  const cards = get(state`trello.lists.feedDeliveries.cards`);\n  const ignoreBefore = moment(get(state`feed.ignoreBefore`), 'YYYY-MM-DD');\n\n  const {records,errors} = _.reduce(cards, (acc,c,key) => {\n    try {\n      const r = processOneCard(c, { ignoreBefore });\n      if (r) acc.records.push(r);\n    } catch (err) {\n      acc.errors.push({ error: err.toString(), card: c });\n    } finally {\n      return acc;\n    }\n  }, { errors: [], records: [] });\n  store.set(state`feed.records`, _.keyBy(records, r => r.id));\n  store.set(state`feed.errors`, errors);\n\n}\n\nfunction processGroups({store,get}) {\n  const records = get(state`feed.records`);\n  //----------------------------------------------------------\n  // Find loads not billed, group by destination\n  let notInvoiced = _.reduce(records, (acc,r) => {\n    if (!r.invoiced) acc.push(r);\n    return acc;\n  }, []);\n  notInvoiced = _.filter(notInvoiced, d => d.destination.toUpperCase() !== 'HOME');\n  store.set(state`feed.notInvoiced`, _.groupBy(notInvoiced, n => n.destination));\n\n  //---------------------------------------------------------\n  // Find loads not paid for by us, group by source:\n  let notPaidFor = _.reduce(records, (acc,r) => {\n    if (!r.paidFor) acc.push(r);\n    return acc;\n  },[]);\n  store.set(state`feed.notPaidFor`, _.groupBy(notPaidFor, p => p.source));\n\n  //----------------------------------------------------------------------------------\n  // Find loads that Brad hauled which we have not been billed for, group by source:\n  let truckingNotPaid = _.reduce(records, (acc,r) => {\n    if (r.driver.toUpperCase() === 'BRAD'\n        && !r.truckingPaid) acc.push(r);\n    return acc;\n  },[]);\n  store.set(state`feed.truckingNotPaid`, _.groupBy(truckingNotPaid, t => t.source));\n\n}\n\nexport const fetch = sequence('feed.fetch', [\n  () => ({ boardName: 'Feed', listName: 'Feed Delivered', key: 'feedDeliveries' }),\n  loadList,\n  processCards,\n  processGroups,\n  set(state`feed.ready`, true),\n]);\n\nexport const reprocessOneCard = sequence('feed.reprocessOneCard', [\n  ({store,get,props}) => {\n    const ignoreBefore = moment(get(state`feed.ignoreBefore`), 'YYYY-MM-DD');\n    try {\n      store.set(state`feed.records.${props.card.id}`, processOneCard(props.card, {ignoreBefore}));\n    } catch (err) {\n      store.errors.push({ error: err.toString(), card: props.card });\n    }\n  },\n]);\n\n// Expects props.id, will mark one record as invoiced in trello\nexport const markAsInvoiced = sequence('feed.markAsInvoiced', [\n  // record id is same as cardid, so we can just use it\n  ({get}) => {\n    // Figure out id of \"orange\" color label\n    const labels = get(state`trello.lists.feedDeliveries.labels`);\n    const orangeLabel = _.find(labels, l => l.color === 'orange');\n    return { idLabel: orangeLabel.id };\n  },\n  addLabelToCard,\n  reprocessOneCard,\n  processGroups,\n]);\n","import * as sequences from './sequences';\n\nexport default {\n  sequences,\n  state: {\n    ignoreBefore: '2017-11-01', // ignore all deliveries before this date for checking paid/invoiced/trucking status\n    ready: false,\n    records: [],\n    notPaidFor: {},\n    notInvoiced: {},\n    truckingNotPaid: {},\n  },\n};\n\n","import * as sequences from './sequences';\n\nexport default {\n  sequences,\n  state: {\n    authorized: false,\n    lists: {\n      // feed: {\n      //   name: 'Feed Delivered'\n      //   id: 'kdj20fi32jld',\n      //   cards: { ... },  // the regular trello list of cards\n      // }\n    },\n  },\n};\n\n","import { state,sequence } from 'cerebral';\n\nexport const resized = sequence('windowSize.resized', [ \n  ({windowSize,props,store,get}) => { \n    if (get(state`windowSize.orientation`) !== windowSize.orientation()) {\n      store.set(state`windowSize.orientation`, windowSize.orientation());\n    }\n    const isSmall = (windowSize.orientation() === 'portrait' ? (props.width < 767) : (props.height < 500));\n    if (get(state`windowSize.isSmall`) !== isSmall) store.set(state`windowSize.isSmall`, isSmall);\n  } \n]);\n\nexport const init = sequence('windowSize.init', [\n  ({windowSize}) => windowSize.init('windowSize.resized'), // registers event listener for window resize events\n  resized, // load dimensions the first time\n]);\n\n\n","import * as sequences from './sequences';\n\nexport default {\n  sequences,\n  state: { \n    isSmall: true, // changes to true for mobile, false for computer\n    orientation: 'portrait', // portrait | landscape\n  },\n};\n","import { Provider, CerebralError } from 'cerebral';\nimport Promise from 'bluebird';\n\nexport class TrelloClientLoadError extends CerebralError {};\n\n// dev key: 3ad06cb25802014a3f24f479e886771c\n// URL to refresh client lib: https://api.trello.com/1/client.js?key=3ad06cb25802014a3f24f479e886771c\n\nconst waitUntilLoaded = () => Promise.try(() => {\n  let count = 0;\n  const check = () => {\n    if (window.Trello) return true;\n    if (count++ > 50) throw TrelloClientLoadError('Could not load Trello client library');\n    return Promise.delay(250).then(check);\n  };\n  return Promise.try(check);\n});\n\n\n// Promisify the normal Trello client:\nexport default Provider({\n\n  //-------------------------------------------------\n  // call authorize first before any other functions in this provider:\n  authorize() {\n    return waitUntilLoaded()\n    .then(() => new Promise((resolve,reject) => {\n      window.Trello.authorize({\n        type: 'redirect',\n        name: 'Ault Farms - Invoices',\n        persist: true,\n        scope: { read: 'true', write: 'true' },\n        expiration: 'never',\n        success: resolve,\n        error: (err) => { console.log('Failed to authorize Trello: err = ', err); reject(err); }\n      });\n      return null;\n    })\n  )},\n\n  deauthorize() {\n    return new Promise((resolve,reject) => { window.Trello.deauthorize(); resolve(); })\n  },\n   get(path,params) { return new Promise((resolve,reject) => window.Trello.get( path,params||{},resolve,err => { console.log('Trello.get ERROR: ', err); reject(err); }))},\n   put(path,params) { return new Promise((resolve,reject) => window.Trello.put( path,params    ,resolve,err => { console.log('Trello.put ERROR: ', err); reject(err); }))},\n  post(path,params) { return new Promise((resolve,reject) => window.Trello.post(path,params    ,resolve,err => { console.log('Trello.post ERROR: ',err); reject(err); }))},\n})\n\n","import { sequences } from 'cerebral';\n\nconst dimensions = () => ({width: window.innerWidth, height: window.innerHeight });\n\nlet seq = '';\n\nconst _M = {\n  dimensions() { return dimensions(); },\n  orientation() {\n    const d = dimensions();\n    return (d.width > d.height ? 'landscape' : 'portrait');\n  },\n\n  windowResized() { \n    this.context.get(sequences`${seq}`)(dimensions())\n  },\n\n  init(sequencepath) {\n    seq = sequencepath;\n    window.addEventListener('resize', _M.windowResized.bind(this));    // compute it the first time:\n    this.context.get(sequences`${sequencepath}`)(dimensions());\n  },\n\n};\n\nexport default _M;\n","import { set, toggle } from 'cerebral/factories';\nimport { state, props, sequence } from 'cerebral';\n\nimport * as       feed from 'aultfarms-lib/feed/module/sequences';\nimport * as     trello from 'aultfarms-lib/trello/module/sequences';\nimport * as windowSize from 'aultfarms-lib/windowSize/module/sequences';\n\nexport const drawerToggle = sequence('drawerToggle', [ \n  toggle(state`page.drawer.open`) \n]);\nexport const closeDrawer = sequence('closeDrawer', [\n  set(state`page.drawer.open`, false),\n]);\n\nexport const changeGroup = sequence('changeGroup', [ \n  set(state`invoicegroups.curgroupname`, props`group`),\n  set(state`page.name`, props`group`),\n  closeDrawer,\n]);\n\nexport const handleError = sequence('handleError', [\n  ({props}) => console.log('Caught an Error props = !', props),\n]);\n\nexport const init = sequence('init', [\n  windowSize.init,\n  trello.authorize,\n  feed.fetch,\n  set(state`recordsValid`, true),\n  // Set initial group to notInvoiced\n  () => ({group: 'notInvoiced'}),\n  changeGroup,\n]);\n\n\n","import  { CerebralError, state } from 'cerebral';\n\nimport       feedModule from 'aultfarms-lib/feed/module';\nimport     trelloModule from 'aultfarms-lib/trello/module';\nimport windowSizeModule from 'aultfarms-lib/windowSize/module';\n\nimport     trelloProvider from 'aultfarms-lib/trello/provider';\nimport windowSizeProvider from 'aultfarms-lib/windowSize/provider';\n\nimport * as sequences from './sequences';\n\nexport default {\n  sequences,\n  catch: [\n    [ CerebralError, sequences.handleError ],\n  ],\n  state: { \n    invoicegroups: {\n      curgroupname: '',\n      curgroup: get => {\n        const c = get(state`invoicegroups.curgroupname`);\n        return get(state`feed.${c}`);\n      },\n    },\n    page: {\n      name: 'invoices', // invoices, payments, trucking\n      drawer: {\n        open: false,\n      },\n    },\n  },\n  modules: {\n          feed: feedModule,\n        trello: trelloModule,\n    windowSize: windowSizeModule,\n  },\n  providers: {\n        trello: trelloProvider,\n    windowSize: windowSizeProvider,\n  },\n};\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AppModule from './module';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport CerebralApp from 'cerebral';\nimport { Container } from '@cerebral/react';\nimport devtools from 'cerebral/devtools';\n\nconst controller = CerebralApp(AppModule, {\n  devtools: process.env.NODE_ENV === 'production' ? null : devtools({host: 'localhost:8000', reconnect: true }),\n});\n\n// Render the root node:\nReactDOM.render(\n  <Container app={controller}>\n    <App />\n  </Container>, document.getElementById('root')\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}